<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Attack Process Simulation</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        label, input {
            margin: 5px;
        }
        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            max-width: 600px;
            margin: auto;
        }
        canvas {
            width: 100%;
            height: 400px;
        }
    </style>
</head>
<body>

<div class="container">
    <h2>Simulate Attack Process</h2>

    <!-- Input fields -->
    <label for="T">Total Time (T):</label>
    <input type="number" id="T" value="10" min="1" step="any">
    
    <label for="n">Number of Intervals (n):</label>
    <input type="number" id="n" value="1000" min="1">
    
    <label for="lambda">Attack Rate (Î»):</label>
    <input type="number" id="lambda" value="2" min="0" step="any">

    <!-- Button to generate the graph -->
    <button onclick="simulateProcess()">Simulate</button>

    <!-- Chart.js Graph -->
    <canvas id="attackChart"></canvas>
</div>

<script>
    // Function to simulate the attack process
    function simulateProcess() {
        // Get input values
        const T = parseFloat(document.getElementById("T").value);
        const n = parseInt(document.getElementById("n").value);
        const lambda = parseFloat(document.getElementById("lambda").value);
        
        const dt = T / n; // Time step size
        const times = [];
        const values = [];
        
        let processValue = 0;
        
        // Simulate the process
        for (let i = 0; i <= n; i++) {
            // Check for attack occurrence using a Bernoulli trial
            const attackOccurred = Math.random() < lambda * dt;
            
            if (attackOccurred) {
                processValue += 1;
            }
            
            // Save the time and corresponding process value
            times.push(i * dt);
            values.push(processValue);
        }
        
        // Update the chart with the new simulation data
        updateChart(times, values);
    }

    // Function to update the chart
    function updateChart(times, values) {
        // Get the chart context
        const ctx = document.getElementById('attackChart').getContext('2d');

        // Create the chart
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: times,
                datasets: [{
                    label: 'Attack Process Value',
                    data: values,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    fill: false,
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Process Value'
                        }
                    }
                }
            }
        });
    }
</script>

</body>
</html>
